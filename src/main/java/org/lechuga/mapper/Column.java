package org.lechuga.mapper;

import java.sql.ResultSet;

import org.lechuga.annotated.MetaField;
import org.lechuga.jdbc.exception.LechugaException;
import org.lechuga.mapper.autogen.Generator;
import org.lechuga.mapper.handler.Handler;

public class Column {

    protected final boolean id;
    protected final String columnName;

    protected final MetaField<?, ?> metafield;

    protected final Accessor accessor;

    protected final Handler handler;
    protected final Generator generator;

    public Column(boolean id, String columnName, MetaField<?, ?> metafield, Accessor accessor, Handler handler,
            Generator generator) {
        super();
        this.id = id;
        this.columnName = columnName;

        this.metafield = metafield;
        this.accessor = accessor;

        this.handler = handler;
        this.generator = generator;

        if (!id && generator != null) {
            // TODO sure?
            throw new LechugaException("autogenerated feature is only allowed for Id-typed columns");
        }
    }

    public MetaField<?, ?> getMetafield() {
        return metafield;
    }

    public Object getValueForJdbc(Object entity) {
        Object javaValue = accessor.get(entity);
        return convertValueForJdbc(javaValue);
    }

    public Object getValueForJdbc(Object entity, int propertyPathIndex) {
        Object javaValue = accessor.get(entity, propertyPathIndex);
        return convertValueForJdbc(javaValue);
    }

    public Object convertValueForJdbc(Object javaValue) {
        return handler.getJdbcValue(javaValue);
    }

    public void loadValue(Object entity, ResultSet rs) {
        try {
            Object value = handler.readValue(rs, columnName);
            accessor.set(entity, value);
        } catch (Exception e) {
            throw new LechugaException(e);
        }
    }

    public boolean isId() {
        return id;
    }

    public String getPropertyName() {
        return accessor.getPropertyName();
    }

    public Class<?> getPropertyType() {
        return accessor.getPropertyFinalType();
    }

    public String getColumnName() {
        return columnName;
    }

    public Generator getGenerator() {
        return generator;
    }

    @Override
    public String toString() {
        return "Column [id=" + id + ", columnName=" + columnName + ", accessor=" + accessor + ", handler=" + handler
                + ", generator=" + generator + "]";
    }

}